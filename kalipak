#!/bin/bash

# KALIPAK: Kali Linux Metapackage Installer CLI
# Copyright (c) 2022 neuralpain <https://github.com/neuralpain>

# set -x

PACKAGES=('System' 'Desktop' 'Hardware' 'Exploit' 'Extra' 'Update' 'Exit')
SYSTEM=('<--back' 'kali-linux-core' 'kali-linux-headless' 'kali-linux-default' 'kali-linux-arm' 'kali-linux-nethunter'); ALLPAK+=${SYSTEM[@]/"<--back"}
DESKTOP=('<--back' 'kali-desktop-core' 'kali-desktop-e17' 'kali-desktop-gnome' 'kali-desktop-i3' 'kali-desktop-kde' 'kali-desktop-lxde' 'kali-desktop-mate' 'kali-desktop-xfce'); ALLPAK+=${DESKTOP[@]/"<--back"}
HARDWARE=('<--back' 'kali-tools-gpu' 'kali-tools-hardware' 'kali-tools-crypto-stego' 'kali-tools-fuzzing' 'kali-tools-802-11' 'kali-tools-bluetooth' 'kali-tools-rfid' 'kali-tools-sdr' 'kali-tools-voip' 'kali-tools-windows-resources' 'kali-linux-labs'); ALLPAK+=${HARDWARE[@]/"<--back"}
EXPLOIT=('<--back' 'kali-tools-information-gathering' 'kali-tools-vulnerability' 'kali-tools-web' 'kali-tools-database' 'kali-tools-passwords' 'kali-tools-wireless' 'kali-tools-reverse-engineering' 'kali-tools-exploitation' 'kali-tools-social-engineering' 'kali-tools-sniffing-spoofing' 'kali-tools-post-exploitation' 'kali-tools-forensics' 'kali-tools-reporting'); ALLPAK+=${EXPLOIT[@]/"<--back"}
EXTRA=('<--back' 'kali-linux-large' 'kali-linux-everything' 'kali-desktop-live'); ALLPAK+=${EXTRA[@]/"<--back"}

DisplayVersion() { echo "kalipak v1.3.0-alpha" && exit 1; }

DisplayHelp() {
  echo
  echo "Usage: kalipak [--update-pkg] [--help] [--version]"
  echo
  echo "Options:"
  echo "  -i, --update-pkg    update package list and upgrade"
  echo "  -h, --help          display this help and exit"
  echo "  -v, --version       display version and exit"
  exit 1
}

UpdatePackageList() {
  printf "\nkalipak: Updating package list...\n\n"
  sudo apt update
  printf "\nkalipak: Upgrade packages? [Y/n] "; read query
  if [ $query == "Y" ] || [ $query == "y" ]; then
    printf "\nkalipak: Upgrading packages...\n\n"
    sudo apt upgrade
  else printf "\nkalipak: Upgrade suspended.\n"; fi
}











InstallOnly() {
  T_pak=${#ARGS[@]}
  T_ins=0
  
  echo "args#: ${#_RGS[@]}"
  echo "args: ${_RGS[@]}"
  
  for _RGS in ${ARGS[@]}; do
    for _PAK in ${ALLPAK[@]}; do
      if [ $_PAK == $_RGS ]; then
        printf "\nkalipak: Installing $_PAK...\n\n"
        sudo apt-get install $_PAK
        let T_ins+=1; fi
    done
  done

  let T_skp=$T_pak-$T_ins

  printf "\n\033[1;32m> Installation completed.\033[0m\n"
  echo "$T_pak package(s), $T_ins installed, $T_skp skipped." && exit 1
}












SelectTool() {
  printf "\n\033[1;37mKALIPAK:\033[0m Kali Linux Metapackage Installer\n\033[1;33mhttps://www.kali.org/docs/general-use/metapackages\033[0m\n"
  echo "-----------------------"
  printf "Select ${PACKAGE} package:\n"
  select TOOL in ${PACKAGESET[@]}; do
    if [ -z $TOOL ]; then 
      printf "\n\033[1;31mkalipak: Not a \"${PACKAGE}\" package.\033[0m\n"
      printf "\nkalipak: Exiting...\n" && exit 1
    elif [ $TOOL == "<--back" ]; then
      clear -x && SelectPackage; fi
    for _OOL in ${PACKAGESET[@]}; do
      if [ $_OOL == $TOOL ]; then
        printf "\nkalipak: Installing $TOOL...\n\n"
        sudo apt-get install $TOOL
        printf "\n\033[1;32m> $TOOL installation completed.\033[0m\n"
        SelectPackage; fi
    done
  done
}

SelectPackage() {
  printf "\n\033[1;37mKALIPAK:\033[0m Kali Linux Metapackage Installer\n\033[1;33mhttps://www.kali.org/docs/general-use/metapackages\033[0m\n"
  echo "-------------------------------"
  echo "Select package type to install:"
  select PACKAGE in ${PACKAGES[@]}; do
    case $PACKAGE in
      System) PACKAGESET=${SYSTEM[@]};;
      Desktop) PACKAGESET=${DESKTOP[@]};;
      Hardware) PACKAGESET=${HARDWARE[@]};;
      Exploit) PACKAGESET=${EXPLOIT[@]};;
      Extra) PACKAGESET=${EXTRA[@]};;
      Update) UpdatePackageList;;
      Exit) printf "\nkalipak: Exiting...\n" && exit 1;;
      *) printf "\n\033[1;31mkalipak: Not a package.\033[0m\n"
      printf "\nkalipak: Exiting...\n" && exit 1
    esac; clear -x && SelectTool
  done
}







split() {
  
  ARGS+=(${tmp// /asd})
  echo $ARGS && exit
}








case "$1" in
  -h | --help) DisplayHelp;;
  -v | --version) DisplayVersion;;
  --update-pkg) UpdatePackageList && SelectPackage;;
  -i) _RGS=$@; ARGS=${_RGS[@]/"-i "}
    




    ARGS=${ARGS[@]//" "/"' '"}
    tmp="('"${ARGS[@]}"')"
    ARGS=$tmp; echo ${ARGS[@]} && exit 1
    






    if [ -z $2 ]; then UpdatePackageList
    else


      # UpdatePackageList && 
      InstallOnly; fi;;



  *) if [ $# -eq 0 ]; then SelectPackage
    else echo "kalipak: unknown command \"$1\""
      DisplayHelp && exit 1
    fi;;
esac
