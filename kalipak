#!/bin/bash

# KALIPAK: Kali Linux Metapackage Installer CLI
# Copyright (c) 2022 neuralpain <https://github.com/neuralpain>
# Licensed under MIT <https://github.com/neuralpain/kalipak/LICENSE>

# --- VARIABLES ---#
PS3="└─ "
# --- message decoration
ERROR="\033[1;31mE:\033[0m"
WARN="\033[1;33mW:\033[0m"
NOTE="\033[0;33mN:\033[0m"
INFO="\033[1;34m(i)\033[0m"
INFO_QUE="\033[1;34m(?)\033[0m"
INFO_POS="\033[1;32m>\033[0m"
INFO2="\033[1;34m<^>\033[0m"
INFO3="\033[1;34mφ\033[0m"
# --- directories
usr_keyring_dir=/usr/share/keyrings
sources_dir=/etc/apt/sources.list.d
kali_sources_list=$sources_dir/kali-rolling.list
trusted_keyring_dir=/etc/apt/trusted.gpg.d
#--- END VARIABLES ---#

DisplayVersion() { echo "kalipak v2.1.0-alpha" && exit 1; }

#--- DISTRO INIT ---#
GetLinuxDistributionName() {
  DISTRO=
  DISTRO_REL=$(sudo cat /etc/*release)
  DISTRO_VER=$(sudo cat /etc/*version)
  # currently, every distro that is not Kali will be
  # recognized as just Debian or another Linux distro
  DISTRO_LIST=('kali' 'debian' 'ubuntu' 'arch')

  for dist in ${DISTRO_LIST[@]}; do
    DISTRO=$(sudo cat /etc/*release | grep -iwom 1 $dist)
    if [ -z $DISTRO ]; then DISTRO="Linux" # label as linux if empty
    # normalize distro name with capital letter
    # as to why i didn't capitalize in the array declaration...idk...aesthetic i guess
    else DISTRO=${DISTRO^} && break; fi 
  done
}

DisplayLinuxDistroInformation() {
  printf "\n\033[1;37m┌─────────────────┐\nDistro Release Info\n└─────────────────┘\033[0m\n$DISTRO_REL\n"
  printf "\n\033[1;37mDistro Version\033[0m\n└─$DISTRO_VER\n\n"
}

InstallRequiredPackages() {
  # --- NOTE: gpg installation will clear-x at some point and delete log
  sys_package_list=('wget' 'gpg') # list of packages required for KALIPAK to function
  for package in ${sys_package_list[@]}; do
    # check if $package installed; install if not found collect response (if any) and store in verf_package
    verf_package=$(dpkg -s $package | grep -iwoEm 1 "installed|is not installed|deinstall")
    # --- ! this part below is unstable and may fail but should work just fine
    # if dpkg did not give a response (!), the package is not installed and will proceed with installation
    # the rest is straightforward
    if [ ! $verf_package ] || [ $verf_package == "is not installed" ] || [ $verf_package == "deinstall" ]; then
      printf "$NOTE Installing package \"$package\"...\n"
      sudo apt install -y $package
      printf "$NOTE Package \"$package\" installation completed.\n"
    elif [ $verf_package == "installed" ]; then printf "$NOTE Package \"$package\" already installed.\n"
    else printf "$WARN Something went wrong.\n"; fi
  done
}

AddMirrorsToAPT() {
  # list of kali mirrors for packages
  kali_mirror_list=(
    # 'http.kali.org' # has server error currently
    'kali.download'
  )

  # output first line of $kali_sources_list to mark kalipak for subsequent verification
  echo "# Kali mirrors added with KALIPAK by $(whoami) [$(date +"%Y-%m-%d %T")]" | sudo tee $kali_sources_list
  
  # cycle through mirror list and add mirrors to APT
  for mirror in ${kali_mirror_list[@]}; do
    # add GPG key to APT sources list
    echo "deb [signed-by=$usr_keyring_dir/kali-archive-keyring.asc] https://$mirror/kali kali-rolling main contrib non-free" | sudo tee -a $kali_sources_list
    printf "$NOTE Mirror \"$mirror/kali\" was added.\n"
  done
}

InstallKaliKeyring() {
  # create keyring directory if it does not exist
  if [ ! -d $usr_keyring_dir ]; then
    sudo mkdir $usr_keyring_dir
    printf "\n$NOTE Keyring directory created."
  fi

  # --- REF: https://gitlab.com/kalilinux/packages/kali-archive-keyring/-/tree/kali/master/debian ---<
  if [ ! -e $usr_keyring_dir/kali-archive-keyring.asc ]; then
    # add kali keyring to ../trusted.gpg.d
    sudo wget https://archive.kali.org/archive-key.asc -O $usr_keyring_dir/kali-archive-keyring.asc
    # install the symlink upon first run
    sudo ln -sf $usr_keyring_dir/kali-archive-keyring.asc $trusted_keyring_dir/kali-archive-keyring.asc
    printf "$NOTE Installed kali-archive-keyring as a trusted APT keyring.\n"
  else printf "$NOTE GPG key for already installed.\n" && break; fi
  
  # verify whether or not the keyring was added successfully
  if [ -f $trusted_keyring_dir/kali-archive-keyring.asc ]; then printf "$NOTE Keyring was installed correctly.\n"
  else printf "$ERROR Problem verifying keyring \"$trusted_keyring_dir/kali-archive-keyring.asc\"\n"
    printf "$WARN No certificates available. Kali mirrors cannot be verified and will NOT be trusted. Remove sources and run 'kalipak --init'.\n"
  fi
}

RemoveSources() {
  if [ -e $kali_sources_list ]; then
    sudo rm -f $kali_sources_list
    printf "\n$WARN Kali sources removed from APT"
  else printf "\n$NOTE No sources from KALIPAK"; fi

  if [ -e $usr_keyring_dir/kali-archive-keyring.asc ]; then 
    sudo rm -f $usr_keyring_dir/kali-archive-keyring.asc
    printf "\n$WARN Kali keyring removed"
  else printf "\n$NOTE No keyring found for Kali"; fi && echo
}

# ----------------------------------------------------------------------- HERE -------- DOWN --------<
KALIPAK_Init() {
  printf "\n$INFO Initializing KALIPAK\n\n"
  # update packages before installation
  sudo apt update
  # do not check kali distributions
  if [ $DISTRO != "Kali" ]; then
    # --- verify kali sources
    # if $kali_sources_list does not exist (either by
    # deletion or not added) create the file
    if [ ! -e $kali_sources_list ]; then 
      sudo touch $kali_sources_list
      printf "$NOTE Kali source list created.\n"
    fi
    
    # --- verify whether or not that the source
    # was added in another instance of KALIPAK
    # and add the sources if not present
    verf_source_list=$(sudo cat $kali_sources_list | grep -iwom 1 kalipak)
    if [ -z ${verf_source_list} ]; then
      InstallRequiredPackages # wget, gpg
      InstallKaliKeyring # kali-archive-keyring.asc
      AddMirrorsToAPT
      # update packages after installation
      sudo apt update
      printf "$NOTE Package list has been updated.\n"
    fi; fi; printf "\n$INFO Initialization complete. Starting KALIPAK...\n"
  GetLinuxDistributionName
  StartSession && PickPackageDistro
}
# ------------------------------------------------------------------------ END -------- HERE --------<

#--- END DISTRO INIT ---#

#--- SESSION DURATION ---#
StartSession() { 
  SessionStartTime=$SECONDS; 
  printf "\n$INFO New session satrted on ${DISTRO}/$(whoami) [$(date +"%Y-%m-%d %T")]\n"
}

EndSession() {
  SessionEndTime=$SECONDS
  if (( $SECONDS > 3600 )) ; then
    let "hours=SECONDS/3600"
    let "minutes=(SECONDS%3600)/60"
    let "seconds=(SECONDS%3600)%60"
    printf "\n$INFO Session terminated in $hours hour(s), $minutes minute(s) and $seconds second(s)" 
    printf "\n$INFO Session ended on ${DISTRO}/$(whoami) [$(date +"%Y-%m-%d %T")]\n\n"
  elif (( $SECONDS > 60 )) ; then
    let "minutes=(SECONDS%3600)/60"
    let "seconds=(SECONDS%3600)%60"
    printf "\n$INFO Session terminated in $minutes minute(s) and $seconds second(s)"
    printf "\n$INFO Session ended on ${DISTRO}/$(whoami) [$(date +"%Y-%m-%d %T")]\n\n"
  else
    printf "\n$INFO Session terminated in $SECONDS seconds"
    printf "\n$INFO Session ended on ${DISTRO}/$(whoami) [$(date +"%Y-%m-%d %T")]\n\n"
  fi
}
#--- END SESSION DURATON ---#

#--- PACKAGE LISTS ---#
KALI_MENU=('System' 'Desktop' 'Hardware' 'Exploit' 'Other' 'Update' 'SwitchToDebian' 'Exit')
DEBIAN_MENU=('KaliSystem' 'KaliTools' 'RemoveSources' 'FixIssues' 'Update' 'Exit')

KALI_MOD_SYSTEM=('<--back' 'KaliARM' 'KaliCore' 'KaliDefault' 'KaliEverything' 'KaliFirmware' 'KaliHeadless' 'KaliLabs' 'KaliLarge' 'KaliNetHunter')
KALI_MOD_TOOLS=('<--back' 'KaliToolsWIFI' 'KaliToolsBluetooth' 'KaliToolsCryptoStego' 'KaliToolsDatabase' 'KaliToolsExploitation' 'KaliToolsForensics' 'KaliToolsFuzzing' 'KaliToolsGPU' 'KaliToolsHardware' 'KaliToolsInformationGathering' 'KaliToolsPasswords' 'KaliToolsPostExploitation' 'KaliToolsReporting' 'KaliToolsReverseEngineering' 'KaliToolsRFID' 'KaliToolsSDR' 'KaliToolsSniffingSpoofing' 'KaliToolsSocialEngineering' 'KaliToolsTop10' 'KaliToolsVoIP' 'KaliToolsVulnerability' 'KaliToolsWeb' 'KaliToolsWindowsResources' 'KaliToolsWireless')

# tool packages
KALI_SYSTEM=('<--back' 'kali-linux-core' 'kali-linux-headless' 'kali-linux-default' 'kali-linux-arm' 'kali-linux-nethunter')
KALI_DESKTOP=('<--back' 'kali-desktop-core' 'kali-desktop-e17' 'kali-desktop-gnome' 'kali-desktop-i3' 'kali-desktop-kde' 'kali-desktop-lxde' 'kali-desktop-mate' 'kali-desktop-xfce')
KALI_HARDWARE=('<--back' 'kali-tools-gpu' 'kali-tools-hardware' 'kali-tools-crypto-stego' 'kali-tools-fuzzing' 'kali-tools-802-11' 'kali-tools-bluetooth' 'kali-tools-rfid' 'kali-tools-sdr' 'kali-tools-voip' 'kali-tools-windows-resources' 'kali-linux-labs')
KALI_EXPLOIT=('<--back' 'kali-tools-information-gathering' 'kali-tools-vulnerability' 'kali-tools-web' 'kali-tools-database' 'kali-tools-passwords' 'kali-tools-wireless' 'kali-tools-reverse-engineering' 'kali-tools-exploitation' 'kali-tools-social-engineering' 'kali-tools-sniffing-spoofing' 'kali-tools-post-exploitation' 'kali-tools-forensics' 'kali-tools-reporting')
KALI_OTHER=('<--back' 'kali-linux-large' 'kali-linux-everything' 'kali-desktop-live')

# kali system
KaliARM=('abootimg' 'aircrack-ng' 'cewl' 'cgpt' 'crunch' 'dnsrecon' 'ethtool' 'exploitdb' 'fake-hwclock' 'hydra' 'initramfs-tools' 'john' 'kali-linux-core' 'libnfc-bin' 'medusa' 'metasploit-framework' 'mfoc' 'ncrack' 'nmap' 'passing-the-hash' 'proxychains4' 'recon-ng' 'sqlmap' 'tcpdump' 'theharvester' 'tshark' 'u-boot-tools' 'usbutils' 'vboot-kernel-utils' 'vboot-utils' 'windows-binaries' 'winexe' 'wpscan')
KaliCore=('ftp' 'kali-defaults' 'netcat-traditional' 'openssh-client' 'openssh-server' 'parted' 'sudo' 'tasksel' 'tcpdump' 'tmux' 'vim-tiny' 'zsh' 'zsh-autosuggestions' 'zsh-syntax-highlighting')
KaliDefault=('autopsy' 'cherrytree' 'cutycapt' 'dirbuster' 'faraday' 'fern-wifi-cracker' 'gparted' 'guymager' 'hydra-gtk' 'kali-linux-headless' 'kali-tools-top10' 'king-phisher' 'legion' 'ophcrack' 'ophcrack-cli' 'rdesktop' 'recordmydesktop' 'sqlitebrowser' 'tightvncserver' 'xtightvncviewer')
KaliEverything=('airgeddon' 'altdns' 'android-sdk' 'apple-bleee' 'arjun' 'assetfinder' 'b374k' 'berate-ap' 'bettercap-ui' 'bing-ip2hosts' 'bloodhound' 'bruteforce-salted-openssl' 'bruteforce-wallet' 'bruteshark' 'brutespray' 'capstone-tool' 'certgraph' 'changeme' 'chaosreader' 'chisel' 'cloud-enum' 'cloudbrute' 'cmseek' 'cntlm' 'crack' 'crowbar' 'cupid-hostapd' 'cupid-wpasupplicant' 'de4dot' 'defectdojo' 'dirsearch' 'dislocker' 'dnscat2' 'dnsgen' 'dnstwist' 'dnsx' 'dscan' 'dufflebag' 'dumpsterdiver' 'dwarf2json' 'eaphammer' 'email2phonenumber' 'emailharvester' 'evil-ssdp' 'exploitdb-bin-sploits' 'exploitdb-papers' 'faraday-cli' 'feroxbuster' 'finalrecon' 'freeradius' 'gdb-peda' 'getallurls' 'gitleaks' 'godoh' 'golang-github-binject-go-donut' 'goldeneye' 'goofile' 'gospider' 'gtkhash' 'hashrat' 'hb-honeypot' 'hcxtools' 'hostapd-mana' 'hosthunter' 'hostsman' 'htshells' 'httprobe' 'httpx-toolkit' 'hurl' 'ibombshell' 'ident-user-enum' 'inspy' 'instaloader' 'ipv6-toolkit' 'ismtp' 'ivre' 'joplin' 'jsp-file-browser' 'kali-community-wallpapers' 'kali-legacy-wallpapers' 'kali-linux-arm' 'kali-linux-core' 'kali-linux-default' 'kali-linux-headless' 'kali-linux-large' 'kali-tools-802-11' 'kali-tools-bluetooth' 'kali-tools-crypto-stego' 'kali-tools-database' 'kali-tools-exploitation' 'kali-tools-forensics' 'kali-tools-fuzzing' 'kali-tools-gpu' 'kali-tools-hardware' 'kali-tools-information-gathering' 'kali-tools-passwords' 'kali-tools-post-exploitation' 'kali-tools-reporting' 'kali-tools-reverse-engineering' 'kali-tools-rfid' 'kali-tools-sdr' 'kali-tools-sniffing-spoofing' 'kali-tools-social-engineering' 'kali-tools-top10' 'kali-tools-voip' 'kali-tools-vulnerability' 'kali-tools-web' 'kali-tools-windows-resources' 'kali-tools-wireless' 'kerberoast' 'knocker' 'koadic' 'lapsdumper' 'linux-exploit-suggester' 'maltego-teeth' 'maryam' 'massdns' 'merlin-agent' 'merlin-server' 'multiforcer' 'naabu' 'name-that-hash' 'nbtscan-unixwiz' 'nextnet' 'nmapsi4' 'nuclei' 'o-saft' 'odat' 'osrframework' 'owl' 'pacu' 'parsero' 'payloadsallthethings' 'peirates' 'phishery' 'photon' 'phpggc' 'phpsploit' 'pnscan' 'pocsuite3' 'pompem' 'poshc2' 'princeprocessor' 'prism' 'proxify' 'proxmark3' 'pskracker' 'pwncat' 'quark-engine' 'redsnarf' 'rev-proxy-grapher' 'ridenum' 'robotstxt' 'ropper' 'routerkeygenpc' 'routersploit' 'ruby-pedump' 's3scanner' 'sentrypeer' 'shed' 'shellfire' 'sherlock' 'silenttrinity' 'sliver' 'snmpenum' 'snowdrop' 'sparrow-wifi' 'spray' 'sprayingtoolkit' 'spraykatz' 'sslstrip' 'stegcracker' 'subfinder' 'subjack' 'sublist3r' 'teamsploit' 'testssl.sh' 'trufflehog' 'tundeep' 'unhide.rb' 'websploit' 'wgetpaste' 'whatmask' 'wifiphisher' 'wifipumpkin3' 'wig' 'wig-ng' 'witnessme' 'wmi-client' 'wordlistraider' 'wotmate' 'wpa-sycophant' 'zonedb')
KaliFirmware=('bluez-firmware' 'firmware-amd-graphics' 'firmware-atheros' 'firmware-brcm80211' 'firmware-intel-sound' 'firmware-iwlwifi' 'firmware-libertas' 'firmware-linux' 'firmware-misc-nonfree' 'firmware-realtek' 'firmware-sof-signed' 'firmware-ti-connectivity' 'firmware-zd1211')
KaliHeadless=('aircrack-ng' 'amass' 'apache2' 'arp-scan' 'arping' 'atftpd' 'axel' 'bind9-dnsutils' 'binwalk' 'bluez' 'bluez-hcidump' 'bulk-extractor' 'bully' 'cadaver' 'cewl' 'chntpw' 'cifs-utils' 'clang' 'commix' 'crackmapexec' 'creddump7' 'crunch' 'cryptcat' 'cryptsetup' 'cryptsetup-initramfs' 'cryptsetup-nuke-password' 'curlftpfs' 'davtest' 'dbd' 'default-mysql-server' 'dirb' 'dmitry' 'dns2tcp' 'dnschef' 'dnsenum' 'dnsrecon' 'dos2unix' 'enum4linux' 'ethtool' 'evil-winrm' 'exe2hexbat' 'exiv2' 'expect' 'exploitdb' 'ffuf' 'fierce' 'fping' 'gdisk' 'git' 'gpp-decrypt' 'hash-identifier' 'hashcat' 'hashcat-utils' 'hashdeep' 'hashid' 'hotpatch' 'hping3' 'hydra' 'i2c-tools' 'ifenslave' 'ike-scan' 'impacket-scripts' 'inetsim' 'iodine' 'iw' 'john' 'kali-linux-core' 'kismet' 'laudanum' 'lbd' 'libimage-exiftool-perl' 'macchanger' 'magicrescue' 'maskprocessor' 'masscan' 'metasploit-framework' 'mimikatz' 'minicom' 'miredo' 'mitmproxy' 'msfpc' 'multimac' 'nasm' 'nbtscan' 'ncrack' 'ncurses-hexedit' 'netdiscover' 'netmask' 'netsed' 'netsniff-ng' 'nfs-common' 'ngrep' 'nikto' 'nmap' 'onesixtyone' 'openvpn' 'p7zip-full' 'passing-the-hash' 'patator' 'pdf-parser' 'pdfid' 'php' 'php-mysql' 'pipal' 'pixiewps' 'plocate' 'powershell' 'powershell-empire' 'powersploit' 'proxychains4' 'proxytunnel' 'ptunnel' 'pwnat' 'python-is-python3' 'python3-impacket' 'python3-pip' 'python3-scapy' 'python3-virtualenv' 'qsslcaudit' 'radare2' 'rake' 'reaver' 'rebind' 'recon-ng' 'redsocks' 'responder' 'rfkill' 'rsmangler' 'sakis3g' 'samba' 'samdump2' 'sbd' 'scalpel' 'screen' 'scrounge-ntfs' 'sendemail' 'set' 'skipfish' 'sleuthkit' 'smbmap' 'snmp' 'snmpcheck' 'snmpd' 'socat' 'spiderfoot' 'spike' 'spooftooph' 'sqlmap' 'ssldump' 'sslh' 'sslscan' 'sslsplit' 'sslyze' 'statsprocessor' 'stunnel4' 'swaks' 'tcpick' 'tcpreplay' 'telnet' 'testdisk' 'tftp' 'thc-ipv6' 'thc-pptp-bruter' 'theharvester' 'traceroute' 'udptunnel' 'unix-privesc-check' 'unar' 'upx-ucl' 'vboot-kernel-utils' 'vboot-utils' 'vim' 'vlan' 'voiphopper' 'vpnc' 'wafw00f' 'wce' 'webshells' 'weevely' 'wfuzz' 'whatweb' 'whois' 'wifite' 'windows-binaries' 'winexe' 'wordlists' 'wpscan')
KaliLabs=('dvwa' 'juice-shop')
KaliLarge=('0trace' 'afflib-tools' 'amap' 'apache-users' 'apktool' 'armitage' 'arpwatch' 'asleap' 'backdoor-factory' 'bed' 'beef-xss' 'bluelog' 'blueranger' 'bluesnarfer' 'braa' 'btscanner' 'bytecode-viewer' 'cabextract' 'caldera' 'cgpt' 'chirp' 'chkrootkit' 'cisco-auditing-tool' 'cisco-global-exploiter' 'cisco-ocs' 'cisco-torch' 'cloud-enum' 'cmospwd' 'code-oss' 'copy-router-config' 'cowpatty' 'cymothoa' 'darkstat' 'dbeaver' 'dc3dd' 'dcfldd' 'ddrescue' 'dex2jar' 'dhcpig' 'dnsmap' 'dnstracer' 'dnswalk' 'doona' 'dotdotpwn' 'dradis' 'driftnet' 'dsniff' 'dumpzilla' 'eapmd5pass' 'edb-debugger' 'enumiax' 'ettercap-text-only' 'ewf-tools' 'extundelete' 'fcrackzip' 'fiked' 'foremost' 'fragrouter' 'framework2' 'ftester' 'galleta' 'gdb' 'ghidra' 'gobuster' 'hackrf' 'hamster-sidejack' 'hexinject' 'httrack' 'iaxflood' 'intrace' 'inviteflood' 'irpas' 'jadx' 'javasnoop' 'jboss-autopwn' 'johnny' 'joomscan' 'jsql-injection' 'kali-linux-core' 'kali-linux-default' 'kismet-logtools' 'libfindrtp' 'libfreefare-bin' 'libhivex-bin' 'libnfc-bin' 'lynis' 'maltego' 'mc' 'mdbtools' 'mdk3' 'medusa' 'memdump' 'mercurial' 'mfcuk' 'mfoc' 'mfterm' 'missidentify' 'ncat-w32' 'netwag' 'nipper-ng' 'nishang' 'ohrwurm' 'ollydbg' 'oscanner' 'p0f' 'pack' 'padbuster' 'paros' 'pasco' 'perl-cisco-copyconfig' 'pev' 'photon' 'plecost' 'polenum' 'protos-sip' 'pst-utils' 'rainbowcrack' 'rcracki-mt' 'recoverjpeg' 'redfang' 'reglookup' 'regripper' 'rifiuti' 'rifiuti2' 'rtpbreak' 'rtpflood' 'rtpinsertsound' 'rtpmixsound' 'safecopy' 'sctpscan' 'seclists' 'sfuzz' 'sidguesser' 'siege' 'siparmyknife' 'sipcrack' 'sipp' 'sipvicious' 'smali' 'smtp-user-enum' 'sniffjoke' 'spectools' 'sqldict' 'sqlninja' 'sqlsus' 'sslsniff' 'starkiller' 'subversion' 'sucrack' 't50' 'tcpflow' 'termineter' 'tftpd32' 'thc-ssl-dos' 'tlssled' 'tnscmd10g' 'truecrack' 'twofi' 'unicornscan' 'uniscan' 'urlcrazy' 'vim-gtk3' 'vinetto' 'wapiti' 'webacoo' 'webscarab' 'wifi-honey' 'xprobe' 'xspy' 'xsser' 'yersinia' 'zaproxy' 'zerofree' 'zim')
KaliNetHunter=('aircrack-ng' 'apache2' 'armitage' 'autoconf' 'autossh' 'backdoor-factory' 'beef-xss' 'bettercap' 'bind9-dnsutils' 'binutils-arm-none-eabi' 'burpsuite' 'dbd' 'device-pharmer' 'dnsmasq' 'dsniff' 'ettercap-text-only' 'exe2hexbat' 'exploitdb' 'florence' 'g++' 'gcc' 'gcc-arm-none-eabi' 'gpsd' 'hostapd' 'isc-dhcp-server' 'iw' 'kali-defaults' 'kali-desktop-xfce' 'kali-linux-core' 'kismet' 'kismet-plugins' 'libapache2-mod-php' 'libbz2-dev' 'libffi-dev' 'libncurses5-dev' 'libnewlib-arm-none-eabi' 'libreadline6-dev' 'libssl-dev' 'libtool' 'libxml2-dev' 'macchanger' 'make' 'mdk3' 'metasploit-framework' 'mfoc' 'mitmproxy' 'msfpc' 'nethunter-utils' 'nishang' 'nmap' 'openssh-server' 'openvpn' 'p0f' 'php' 'pixiewps' 'postgresql' 'ptunnel' 'python3-dnspython' 'python3-lxml' 'python3-m2crypto' 'python3-mako' 'python3-netaddr' 'python3-pcapy' 'python3-pip' 'python3-setuptools' 'python3-twisted' 'recon-ng' 'rfkill' 'socat' 'sox' 'sqlmap' 'sslsplit' 'tcpdump' 'tcptrace' 'tigervnc-standalone-server' 'tinyproxy' 'tshark' 'wifite' 'wipe' 'wireshark' 'wpasupplicant' 'zip' 'zlib1g-dev')

# kali tools
KaliToolsWIFI=('aircrack-ng' 'airgeddon' 'asleap' 'bully' 'cowpatty' 'eapmd5pass' 'fern-wifi-cracker' 'freeradius-wpe' 'hashcat' 'hostapd-wpe' 'iw' 'kismet' 'macchanger' 'mdk3' 'mdk4' 'pixiewps' 'reaver' 'wifi-honey' 'wifite')
KaliToolsBluetooth=('bluelog' 'blueranger' 'bluesnarfer' 'bluez' 'bluez-hcidump' 'btscanner' 'crackle' 'redfang' 'spooftooph' 'ubertooth')
KaliToolsCryptoStego=('aesfix' 'aeskeyfind' 'ccrypt' 'outguess' 'steghide' 'stegsnow')
KaliToolsDatabase=('jsql-injection' 'mdbtools' 'oscanner' 'sidguesser' 'sqldict' 'sqlitebrowser' 'sqlmap' 'sqlninja' 'sqlsus' 'tnscmd10g')
KaliToolsExploitation=('armitage' 'beef-xss' 'exploitdb' 'metasploit-framework' 'msfpc' 'set' 'shellnoob' 'sqlmap' 'termineter')
KaliToolsForensics=('afflib-tools' 'apktool' 'autopsy' 'binwalk' 'bulk-extractor' 'bytecode-viewer' 'cabextract' 'chkrootkit' 'creddump7' 'dc3dd' 'dcfldd' 'ddrescue' 'dumpzilla' 'edb-debugger' 'ewf-tools' 'exifprobe' 'exiv2' 'ext3grep' 'ext4magic' 'extundelete' 'fcrackzip' 'firmware-mod-kit' 'foremost' 'forensic-artifacts' 'forensics-colorize' 'galleta' 'gdb' 'gpart' 'gparted' 'grokevt' 'guymager' 'hashdeep' 'inetsim' 'jadx' 'javasnoop' 'libhivex-bin' 'lime-forensics' 'lvm2' 'lynis' 'mac-robber' 'magicrescue' 'md5deep' 'mdbtools' 'memdump' 'metacam' 'missidentify' 'myrescue' 'nasm' 'nasty' 'ollydbg' 'p7zip-full' 'parted' 'pasco' 'pdf-parser' 'pdfid' 'pev' 'plaso' 'polenum' 'pst-utils' 'python3-capstone' 'python3-dfdatetime' 'python3-dfvfs' 'python3-dfwinreg' 'python3-distorm3' 'radare2' 'radare2-cutter' 'recoverdm' 'recoverjpeg' 'reglookup' 'regripper' 'rephrase' 'rifiuti' 'rifiuti2' 'rkhunter' 'rsakeyfind' 'safecopy' 'samdump2' 'scalpel' 'scrounge-ntfs' 'sleuthkit' 'smali' 'sqlitebrowser' 'ssdeep' 'tcpdump' 'tcpflow' 'tcpick' 'tcpreplay' 'truecrack' 'undbx' 'unhide' 'unar' 'upx-ucl' 'vinetto' 'wce' 'winregfs' 'wireshark' 'xmount' 'xplico' 'yara')
KaliToolsFuzzing=('afl++' 'sfuzz' 'spike' 'wfuzz')
KaliToolsGPU=('oclgausscrack' 'truecrack')
KaliToolsHardware=('binwalk' 'cutecom' 'flashrom' 'minicom' 'openocd' 'qemu-system-x86' 'qemu-user' 'radare2' 'radare2-cutter')
KaliToolsInformationGathering=('0trace' 'arping' 'braa' 'dmitry' 'dnsenum' 'dnsmap' 'dnsrecon' 'dnstracer' 'dnswalk' 'enum4linux' 'fierce' 'firewalk' 'fping' 'fragrouter' 'ftester' 'hping3' 'ike-scan' 'intrace' 'irpas' 'lbd' 'legion' 'maltego' 'masscan' 'metagoofil' 'nbtscan' 'ncat' 'netdiscover' 'netmask' 'nmap' 'onesixtyone' 'p0f' 'qsslcaudit' 'recon-ng' 'smbmap' 'smtp-user-enum' 'snmpcheck' 'ssldump' 'sslh' 'sslscan' 'sslyze' 'swaks' 'thc-ipv6' 'theharvester' 'tlssled' 'twofi' 'unicornscan' 'urlcrazy' 'wafw00f' 'xprobe')
KaliToolsPasswords=('cewl' 'chntpw' 'cisco-auditing-tool' 'cmospwd' 'crackle' 'creddump7' 'crunch' 'fcrackzip' 'freerdp2-x11' 'gpp-decrypt' 'hash-identifier' 'hashcat' 'hashcat-utils' 'hashid' 'hydra' 'hydra-gtk' 'john' 'johnny' 'kali-tools-gpu' 'maskprocessor' 'medusa' 'mimikatz' 'ncrack' 'onesixtyone' 'ophcrack' 'ophcrack-cli' 'pack' 'passing-the-hash' 'patator' 'pdfcrack' 'pipal' 'polenum' 'rainbowcrack' 'rarcrack' 'rcracki-mt' 'rsmangler' 'samdump2' 'seclists' 'sipcrack' 'sipvicious' 'smbmap' 'sqldict' 'statsprocessor' 'sucrack' 'thc-pptp-bruter' 'truecrack' 'twofi' 'wordlists')
KaliToolsPostExploitation=('backdoor-factory' 'cymothoa' 'dbd' 'dns2tcp' 'exe2hexbat' 'iodine' 'laudanum' 'mimikatz' 'miredo' 'nishang' 'powersploit' 'proxychains4' 'proxytunnel' 'ptunnel' 'pwnat' 'sbd' 'shellter' 'sslh' 'stunnel4' 'udptunnel' 'veil' 'webacoo' 'weevely')
KaliToolsReporting=('cutycapt' 'dradis' 'eyewitness' 'faraday' 'maltego' 'metagoofil' 'pipal' 'recordmydesktop')
KaliToolsReverseEngineering=('apktool' 'bytecode-viewer' 'clang' 'dex2jar' 'edb-debugger' 'jadx' 'javasnoop' 'jd-gui' 'metasploit-framework' 'ollydbg' 'radare2' 'radare2-cutter')
KaliToolsRFID=('gnuradio' 'libfreefare-bin' 'libnfc-bin' 'mfcuk' 'mfoc' 'mfterm' 'proxmark3' 'rfdump')
KaliToolsSDR=('chirp' 'gnuradio' 'gqrx-sdr' 'gr-air-modes' 'gr-iqbal' 'gr-osmosdr' 'hackrf' 'inspectrum' 'kalibrate-rtl' 'multimon-ng' 'rtlsdr-scanner' 'uhd-host' 'uhd-images')
KaliToolsSniffingSpoofing=('bettercap' 'darkstat' 'dnschef' 'driftnet' 'dsniff' 'ettercap-text-only' 'fiked' 'hamster-sidejack' 'hexinject' 'isr-evilgrade' 'macchanger' 'mitmproxy' 'netsniff-ng' 'rebind' 'responder' 'sniffjoke' 'sslsniff' 'sslsplit' 'tcpflow' 'tcpreplay' 'wifi-honey' 'wireshark' 'yersinia')
KaliToolsSocialEngineering=('backdoor-factory' 'beef-xss' 'maltego' 'msfpc' 'set' 'veil')
KaliToolsTop10=('aircrack-ng' 'burpsuite' 'crackmapexec' 'hydra' 'john' 'metasploit-framework' 'nmap' 'responder' 'sqlmap' 'wireshark')
KaliToolsVoIP=('enumiax' 'iaxflood' 'inviteflood' 'libfindrtp' 'nmap' 'ohrwurm' 'protos-sip' 'rtpbreak' 'rtpflood' 'rtpinsertsound' 'rtpmixsound' 'sctpscan' 'siparmyknife' 'sipcrack' 'sipp' 'sipvicious' 'voiphopper' 'wireshark')
KaliToolsVulnerability=('afl++' 'bed' 'cisco-auditing-tool' 'cisco-global-exploiter' 'cisco-ocs' 'cisco-torch' 'copy-router-config' 'dhcpig' 'enumiax' 'gvm' 'iaxflood' 'inviteflood' 'legion' 'lynis' 'nikto' 'nmap' 'ohrwurm' 'peass' 'protos-sip' 'rtpbreak' 'rtpflood' 'rtpinsertsound' 'rtpmixsound' 'sctpscan' 'sfuzz' 'siege' 'siparmyknife' 'sipp' 'sipsak' 'sipvicious' 'slowhttptest' 'spike' 't50' 'thc-ssl-dos' 'unix-privesc-check' 'voiphopper' 'yersinia')
KaliToolsWeb=('apache-users' 'apache2' 'beef-xss' 'burpsuite' 'cadaver' 'commix' 'cutycapt' 'davtest' 'default-mysql-server' 'dirb' 'dirbuster' 'dotdotpwn' 'eyewitness' 'ftester' 'hakrawler' 'hamster-sidejack' 'heartleech' 'httprint' 'httrack' 'hydra' 'hydra-gtk' 'jboss-autopwn' 'joomscan' 'jsql-injection' 'laudanum' 'lbd' 'maltego' 'medusa' 'mitmproxy' 'ncrack' 'nikto' 'nishang' 'nmap' 'oscanner' 'owasp-mantra-ff' 'padbuster' 'paros' 'patator' 'php' 'php-mysql' 'plecost' 'proxychains4' 'proxytunnel' 'qsslcaudit' 'redsocks' 'sidguesser' 'siege' 'skipfish' 'slowhttptest' 'sqldict' 'sqlitebrowser' 'sqlmap' 'sqlninja' 'sqlsus' 'ssldump' 'sslh' 'sslscan' 'sslsniff' 'sslsplit' 'sslyze' 'stunnel4' 'thc-ssl-dos' 'tlssled' 'tnscmd10g' 'uniscan' 'wafw00f' 'wapiti' 'watobo' 'webacoo' 'webscarab' 'webshells' 'weevely' 'wfuzz' 'whatweb' 'wireshark' 'wpscan' 'xsser' 'zaproxy')
KaliToolsWindowsResources=('dbd' 'dnschef' 'heartleech' 'hyperion' 'mimikatz' 'ncat-w32' 'ollydbg' 'powercat' 'regripper' 'sbd' 'secure-socket-funneling-windows-binaries' 'shellter' 'tftpd32' 'wce' 'windows-binaries' 'windows-privesc-check')
KaliToolsWireless=('kali-tools-802-11' 'kali-tools-bluetooth' 'kali-tools-rfid' 'kali-tools-sdr' 'rfcat' 'rfkill' 'sakis3g' 'spectools' 'wireshark')
#--- END PACKAGE LISTS ---#

MenuHeader() {
  echo; echo "┌─────┐"
  printf "\033[1;37mKALIPAK: Kali Linux Metapackage CLI\033[0m"
  printf "\n\033[1;33mhttps://github.com/neuralpain/kalipak\033[0m"
  printf "\n\033[1;33mhttps://www.kali.org/tools/kali-meta\033[0m\n"
  echo "┌──────────────────────┘"
}

PickPackageDistro() {
  if [ ${DISTRO} == "Kali" ];
    then SelectPackage_Kali
    else SelectPackage_Debian
  fi
}

UpdatePackageList() {
  printf "\nUpdating package list...\n"; sudo apt update
  printf "\n$NOTE If upgrade size is larger than 100M, please reschedule.\n"
  printf "\n$INFO_QUE Upgrade packages? [Y/n] "; read query
  if [ ! $query ]; then printf "\n$NOTE Upgrade suspended.\n" && PickPackageDistro; fi
  if [ $query == "Y" ] || [ $query == "y" ]; then printf "\nUpgrading packages...\n" && sudo apt upgrade -y
  elif [ $query == "N" ] || [ $query == "n" ]; then printf "\n$NOTE Upgrade suspended.\n"
  else printf "\n$ERROR Invalid response.\n$NOTE Upgrade suspended.\n"; fi
  PickPackageDistro
}

#--- KALI SELECTION ---#
SelectTool_Kali() {
  clear -x && MenuHeader
  printf "Select ${PACKAGE} package:\n"
  select TOOL in ${PACKAGESET[@]}; do
    if [ -z $TOOL ]; then 
      printf "\n$ERROR Not a \"${PACKAGE}\" package.\n"
      EndSession && exit 1
    elif [ $TOOL == "<--back" ]; then
      clear -x && SelectPackage_Kali; fi
    for _OOL in ${PACKAGESET[@]}; do
      if [ $_OOL == $TOOL ]; then
        printf "\n$INFO Installing $TOOL...\n"
        sudo apt install $TOOL
        printf "\n$INFO_POS $TOOL installation completed.\n"
        PickPackageDistro; fi
    done
  done
}

SelectPackage_Kali() {
  MenuHeader
  echo "Select package type to install:"
  select PACKAGE in ${KALI_MENU[@]}; do
    case $PACKAGE in
      System) PACKAGESET=${KALI_SYSTEM[@]};;
      Desktop) PACKAGESET=${KALI_DESKTOP[@]};;
      Hardware) PACKAGESET=${KALI_HARDWARE[@]};;
      Exploit) PACKAGESET=${KALI_EXPLOIT[@]};;
      Other) PACKAGESET=${KALI_OTHER[@]};;
      Update) UpdatePackageList && PickPackageDistro;;
      SwitchToDebian) EndSession; DISTRO="Debian"
        StartSession && PickPackageDistro;;
      Exit) EndSession && exit 1;;
      *) printf "\n$ERROR Not an option.\n"
      EndSession && exit 1
    esac; SelectTool_Kali
  done
}
#--- END KALI SELECTION ---#

#--- LINUX/DEBIAN SELECTION ---#
FixInstallIssues() { 
  printf "\nAttempting to fix issues...\n"
  sudo apt autoremove
  sudo apt --fix-broken install
}

RunInstallationForDebian() {
  printf "\nInstalling packages...\n"
  sudo apt install ${DEPACKAGESET[@]}
  printf "\n$INFO_POS Installation completed.\n"
  PickPackageDistro
}

SelectPackage_Debian_KaliSystem() {
  clear -x && MenuHeader
  echo "Select package type to install:"
  select TOOL in ${KALI_MOD_SYSTEM[@]}; do
    if [ -z $TOOL ]; then 
      printf "\n$ERROR Not a package.\n"
      EndSession && exit 1
    elif [ $TOOL == "<--back" ]; then
      clear -x && SelectPackage_Debian; fi
    for _OOL in ${KALI_MOD_SYSTEM[@]}; do
      case $_OOL in
        KaliARM) DEPACKAGESET=${KaliARM[@]};;
        KaliCore) DEPACKAGESET=${KaliCore[@]};;
        KaliDefault) DEPACKAGESET=${KaliDefault[@]};;
        KaliEverything) DEPACKAGESET=${KaliEverything[@]};;
        KaliFirmware) DEPACKAGESET=${KaliFirmware[@]};;
        KaliHeadless) DEPACKAGESET=${KaliHeadless[@]};;
        KaliLabs) DEPACKAGESET=${KaliLabs[@]};;
        KaliLarge) DEPACKAGESET=${KaliLarge[@]};;
        KaliNetHunter) DEPACKAGESET=${KaliNetHunter[@]};;
      esac; done && RunInstallationForDebian
  done
}

SelectPackage_Debian_KaliTools() {
  clear -x && MenuHeader
  echo "Select package type to install:"
  select TOOL in ${KALI_MOD_TOOLS[@]}; do
    if [ -z $TOOL ]; then 
      printf "\n$ERROR Not a package.\n"
      EndSession && exit 1
    elif [ $TOOL == "<--back" ]; then
      clear -x && SelectPackage_Debian; fi
    for _OOL in ${KALI_MOD_TOOLS[@]}; do
      case $_OOL in
        KaliToolsWIFI) DEPACKAGESET=${KaliToolsWIFI[@]};;
        KaliToolsBluetooth) DEPACKAGESET=${KaliToolsBluetooth[@]};;
        KaliToolsCryptoStego) DEPACKAGESET=${KaliToolsCryptoStego[@]};;
        KaliToolsDatabase) DEPACKAGESET=${KaliToolsDatabase[@]};;
        KaliToolsExploitation) DEPACKAGESET=${KaliToolsExploitation[@]};;
        KaliToolsForensics) DEPACKAGESET=${KaliToolsForensics[@]};;
        KaliToolsFuzzing) DEPACKAGESET=${KaliToolsFuzzing[@]};;
        KaliToolsGPU) DEPACKAGESET=${KaliToolsGPU[@]};;
        KaliToolsHardware) DEPACKAGESET=${KaliToolsHardware[@]};;
        KaliToolsInformationGathering) DEPACKAGESET=${KaliToolsInformationGathering[@]};;
        KaliToolsPasswords) DEPACKAGESET=${KaliToolsPasswords[@]};;
        KaliToolsPostExploitation) DEPACKAGESET=${KaliToolsPostExploitation[@]};;
        KaliToolsReporting) DEPACKAGESET=${KaliToolsReporting[@]};;
        KaliToolsReverseEngineering) DEPACKAGESET=${KaliToolsReverseEngineering[@]};;
        KaliToolsRFID) DEPACKAGESET=${KaliToolsRFID[@]};;
        KaliToolsSDR) DEPACKAGESET=${KaliToolsSDR[@]};;
        KaliToolsSniffingSpoofing) DEPACKAGESET=${KaliToolsSniffingSpoofing[@]};;
        KaliToolsSocialEngineering) DEPACKAGESET=${KaliToolsSocialEngineering[@]};;
        KaliToolsTop10) DEPACKAGESET=${KaliToolsTop10[@]};;
        KaliToolsVoIP) DEPACKAGESET=${KaliToolsVoIP[@]};;
        KaliToolsVulnerability) DEPACKAGESET=${KaliToolsVulnerability[@]};;
        KaliToolsWeb) DEPACKAGESET=${KaliToolsWeb[@]};;
        KaliToolsWindowsResources) DEPACKAGESET=${KaliToolsWindowsResources[@]};;
        KaliToolsWireless) DEPACKAGESET=${KaliToolsWireless[@]};;
      esac; done && RunInstallationForDebian
  done
}

SelectPackage_Debian() {
  MenuHeader
  echo "Alternative menu for Debian/Linux:"
  select PACKAGE in ${DEBIAN_MENU[@]}; do
    case $PACKAGE in
      KaliSystem) SelectPackage_Debian_KaliSystem;;
      KaliTools) SelectPackage_Debian_KaliTools;;
      RemoveSources) RemoveSources && PickPackageDistro;;
      FixIssues) FixInstallIssues && PickPackageDistro;;
      Update) UpdatePackageList && PickPackageDistro;;
      Exit) EndSession && exit 1;;
      *) printf "\n$ERROR Not an option.\n"
      EndSession && exit 1
    esac
  done
}
#--- END LINUX/DEBIAN SELECTION ---#

DisplayHelp() {
  printf "\n┌─\033[1;37mKALIPAK\033[0m─┐\n"
  printf "Install Kali metapackages on your Linux distribution\n"
  printf "\n    kalipak [OPTION]\n"
  printf "\nOptions:\n"
  printf "  --init                  initialize KALIPAK\n"
  printf "  --help                  display this help\n"
  printf "  --version               display version\n"
  printf "  --update                update package list and upgrade with confirmation\n"
  printf "  --debian                simulate KALIPAK on Debian\n"
  printf "  --kali                  simulate KALIPAK on Kali\n"
  printf "  --info [--distro-only]  display information on KALIPAK and your Linux distribution\n"
  echo && exit 1
}

# DisplayUsageOnly() {
#   echo && exit 1
# }

GetLinuxDistributionName

case "$1" in
  --init) KALIPAK_Init;;
  --help) DisplayHelp;;
  --version) DisplayVersion;;
  --update) StartSession && UpdatePackageList;;
  --debian) DISTRO="Debian"; StartSession && SelectPackage_Debian;; # switch from kali
  --kali) DISTRO="Kali"; StartSession && SelectPackage_Kali;; # switch from debian/linux
  --info) DisplayLinuxDistroInformation;;
  *) if [ $# -eq 0 ]; then StartSession && PickPackageDistro
    else echo "kalipak: invalid option '$1'"
      echo "Try 'kalipak --help' for more information."; exit 1
    fi;;
esac
